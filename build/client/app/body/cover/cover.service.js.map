{"version":3,"sources":["../../source/client/app/body/cover/cover.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuE,eAAe,CAAC,CAAA;AACvF,qBAAyD,eAAe,CAAC,CAAA;AACzE,2BAAyD,iBAAiB,CAAC,CAAA;AAK3E;IAEI,sBAAoB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QADvB,cAAS,GAAG,eAAe,CAAC;IACD,CAAC;IAEpC,qCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;aAClB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IACO,kCAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;IAC7B,CAAC;IAEO,kCAAW,GAAnB,UAAoB,KAAU;QAC1B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC5C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAExE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACD,iCAAU,GAAV,UAAW,WAAoB;QAC3B,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAC,EAAC,aAAa,EAAC,WAAW,EAAC,EAAC,OAAO,CAAC;aACvD,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IACD,iCAAU,GAAV,UAAW,WAAoB;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,GAAC,WAAW,CAAC;aACpC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAjCL;QAAC,iBAAU,EAAE;;oBAAA;IAkCb,mBAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,oBAAY,eAiCxB,CAAA","file":"cover.service.js","sourcesContent":["import { Injectable, EventEmitter }                               from '@angular/core';\r\nimport { Http, Headers, RequestOptions, Response }  from '@angular/http';\r\nimport { Observable }                               from 'rxjs/Observable';\r\nimport { TVShow, dataTVShow }                       from './tvshow';\r\nimport * as Rx                                      from \"rxjs/Rx\";\r\n\r\n@Injectable()\r\nexport class CoverService {\r\n    private TVShowUrl = '/list_tvshows';\r\n    constructor(private http : Http){  }\r\n\r\n    getAll_TVShows (){\r\n        return this.http.get(this.TVShowUrl)\r\n                         .map(this.extractData) \r\n                         .catch(this.handleError);\r\n    }\r\n    private extractData(res: Response){\r\n        let body = res.json();\r\n        return body.result || {};\r\n    }\r\n\r\n    private handleError(error: any){\r\n        let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n        console.error(errMsg); // log to console instead\r\n        return Observable.throw(errMsg);\r\n    }\r\n    new_TVShow(TVShow_name : string){\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this.http.post('/add_tvshow',{\"TVShow_name\":TVShow_name},options)\r\n                        .map(res => res.json())\r\n                        .catch(this.handleError);\r\n    }\r\n    get_TVShow(TVShow_name : string){\r\n        return this.http.get('/get_tvshow_data/'+TVShow_name)\r\n                        .map(res => res.json())\r\n                        .catch(this.handleError);\r\n    }\r\n}"]}